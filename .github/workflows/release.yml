name: Release

permissions:
  pull-requests: write
  contents: write
  repository-projects: write
  packages: write
  pages: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Version name'
        required: true
        type: string

jobs:
  run_tests:
    uses: ./.github/workflows/callable.test.yml

  setup:
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup git
        run: |
            git remote rm origin
            git remote add origin git@github.com:${{ github.repository }}
            git config --local user.email "actions@github.com"
            git config --local user.name "GitHub Actions"

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Create Tag
        run: |
          TAG_VERSION=${{ github.event.inputs.name }}
          git tag $TAG_VERSION
          git push origin $TAG_VERSION

      - name: Export changelog
        shell: bash
        env:
          TARGET_VERSION: ${{ github.event.inputs.name }}
        run: |
          if [ -z "${TARGET_VERSION}" ]; then
            echo "Error: TARGET_VERSION is not set"
            exit 1
          fi
          
          file="CHANGELOG.md"
          if [ ! -f "$file" ]; then
              echo "File not found: $file"
              exit 1
          fi
          
          capturing=false
          content=""
          while IFS= read -r line; do
              if [[ $line == \#\#* ]]; then
                  version=$(echo "$line" | sed 's/^## //')
                  if [[ $version == $TARGET_VERSION ]]; then
                      capturing=true
                      content="$line"
                  elif $capturing; then
                      break
                  fi
              elif $capturing; then
                  content+=$'\n'"$line"
              fi
          done < "$file"
          
          # After loop, check if capturing is still true to handle the case of single version
          if $capturing; then
              echo -e "$content" > CHANGELOG_temp.md
              echo "Content written to CHANGELOG_temp.md"
          else
              # If capturing is false, check if the TARGET_VERSION was found
              found_version=false
              while IFS= read -r line; do
                  if [[ $line == \#\#* ]]; then
                      version=$(echo "$line" | sed 's/^## //')
                      if [[ $version == $TARGET_VERSION ]]; then
                          found_version=true
                          capturing=true
                          content="$line"
                          break
                      fi
                  fi
              done < "$file"
          
              if $capturing; then
                  echo -e "$content" > CHANGELOG_temp.md
                  echo "Content written to CHANGELOG_temp.md"
              else
                  if $found_version; then
                      echo "No content found after $TARGET_VERSION in $file"
                  else
                      echo "Target version not found in $file"
                  fi
                  exit 1
              fi
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Install dependencies
        run: yarn ci
      - name: Build with VitePress
        run: yarn run docs:build

      - name: Update html
        env:
          version: ${{ github.event.inputs.name }}
        run: |
            git reset --hard
            git fetch origin
            git checkout -b gh-pages origin/gh-pages || git checkout -b gh-pages
            git pull origin gh-pages || true
            
            sed -i 's|url=https://cocoa-beans.apartium.net/[^/]*/">|url=https://cocoa-beans.apartium.net/'"$version"'/">|' "index.html"
            
            git add index.html
            git commit -m "Update index.html"

      - name: Update docs
        run: |
          git fetch origin || true
          git checkout gh-pages origin/pages || git checkout pages
          git pull origin pages || true
          
          ls -la
          git mv pages/.vitepress/dist .
          ls -la
          git add /dist
          
          git commit -m "Update docs"
          git push origin pages
